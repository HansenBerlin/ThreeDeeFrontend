@using System 
@using System.IO
@using System.Net.Security
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject IWebHostEnvironment Environment
@inject ILogger<FileUpload> Logger


<InputFile OnChange="@LoadFiles" multiple/>


@if (isLoading)
{
    <p>Progress: @string.Format("{0:P0}", _progressPercent)</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <u1 class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </u1>
}
@code
{
    private long maxFileSize = 1024 * 1024 * 1024; //=1 GB
    private int maxAllowedFiles = 1;
    private bool isLoading; //gibt an, ob gerade Dateien geladen werden
    private List<IBrowserFile> loadedFiles = new();
    private decimal _progressPercent;
    private List<string> errors = new();
    
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} files are allowed");
            return;
        }

        foreach (var file  in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var trustedFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
                var path = Path.Combine(Environment.ContentRootPath,
                    "unsafe_uploads", trustedFileName);

                await using FileStream writeStream = new(path, FileMode.Create);
                using var readStream = file.OpenReadStream(maxFileSize);
                var bytesRead = 0;
                var totalRead = 0;
                var buffer = new byte[1024 * 10];

                while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                {
                    totalRead += bytesRead;
                    await writeStream.WriteAsync(buffer, 0, bytesRead);
                    _progressPercent = Decimal.Divide(totalRead, file.Size);
                    StateHasChanged();
                }
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {FileName} Error: {Error}", 
                    file.Name, ex.Message);
            }
        }
        isLoading = false;

    }
}
