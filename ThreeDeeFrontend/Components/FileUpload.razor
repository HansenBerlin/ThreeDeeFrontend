@inject IWebHostEnvironment Environment
@attribute [Authorize]

<MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" MaximumFileCount="1" Style="margin: 0;">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context">
            Upload Files
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>


    <MudList>
        @foreach (var file in _files)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>


@code
{
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private int _maxAllowedSize = 1024 * 1024 * 1024;

    private async Task UploadFiles(IBrowserFile file)
    {
        
        _files.Clear();
        var path = Path.Combine(Environment.ContentRootPath,
            "unsafe_uploads", file.Name);
        await using FileStream writeStream = new(path, FileMode.Create);
        await using var readStream = file.OpenReadStream(_maxAllowedSize);
        int bytesRead;
        var buffer = new byte[1024 * 10];

        while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
        {
            await writeStream.WriteAsync(buffer, 0, bytesRead);
            StateHasChanged();
        }
        _files.Add(file);
    }
}