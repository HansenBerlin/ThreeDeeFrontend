@using Blazor3D.Viewers
@using Blazor3D.Scenes
@using Blazor3D.Settings
@using Blazor3D.Lights
@using Blazor3D.Enums
@using Blazor3D.Events
@using Blazor3D.Maths
@using Blazor3D.Cameras
@using System.Diagnostics
@using ThreeDeeFrontend.Services

<Viewer @ref="_view3D1" Scene="_scene" />

@code {
    private Viewer _view3D1 = null!;
    private readonly Scene _scene = new();
    private Guid _loadedObjectGuid = Guid.NewGuid();

    [Inject]
    public IJsInteropService JsInteropService { get; set; }

    [Inject]
    public IThemeProviderService ThemeProviderService { get; set; }
    

    public void ShowInfo()
    {
        _view3D1.ShowCurrentCameraInfo();
    }
    
    protected override Task OnInitializedAsync()
    {
        AddLights();
        return Task.CompletedTask;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
        }
        return Task.CompletedTask;
    }


    private void AddLights(){
        _scene.Add(new AmbientLight());
        _scene.Add(new PointLight()
        {
            Intensity = 0.5f,
            Position = new Vector3(100, 200, 100)
        });
        _scene.Add(new PointLight()
        {
            Intensity = 1f,
            Position = new Vector3(5, 5, 5)
        });
        //_scene.BackGroundColor = "transparent";
    }


    private bool _isInit;
    
    public async Task InitModel()
    {
        if (_isInit == false)
        {
            var settings = new ImportSettings
            {
                Format = Import3DFormats.Stl,
                FileURL = "assets/battery_dispenser.stl"
            };
            
            _loadedObjectGuid = await _view3D1.Import3DModelAsync(settings);
            _view3D1.Camera = new PerspectiveCamera(100, 0.1, 1000);
            await _view3D1.SetCameraPositionAsync(new Vector3(70, 36, 106), new Vector3(0, 1, 0));
            ThemeProviderService.BackgroundColorHasChanged = EventCallback.Factory
                .Create<float[]>(this, async c => await JsInteropService.ChangeCanvasStyle(c));
            var backgroundColor = ThemeProviderService.BackGroundColor();
            await JsInteropService.ChangeCanvasStyle(backgroundColor);
            _isInit = true;
        }
    }
}