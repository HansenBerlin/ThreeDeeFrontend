@inherits LayoutComponentBase
@using Color = MudBlazor.Color
@using ThreeDeeFrontend.ViewModels
@using ThreeDeeFrontend.Services
@using ThreeDeeFrontend.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject TopMenuViewModel TopMenuViewModel

<PageTitle>3D File Management System</PageTitle>
<MudThemeProvider 
    IsDarkMode="@ThemeProviderService.IsDarkMode"
    IsDarkModeChanged="async x => await SwitchTheme(x)" 
    Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudLayout>
    <MudAppBar Elevation="1">
        <MudText
            Typo="Typo.h5"
            Class="ml-3">
            Logo
        </MudText>
        <!--<MudSpacer />-->
        <div class="d-flex justify-center flex-grow-1 gap-4">
            <DropDownMenu 
                Label="Library" 
                MenuItems="@TopMenuViewModel.LibraryItems"/>
            <DropDownMenu 
                Label="Files" 
                MenuItems="@TopMenuViewModel.FilesItems"/>
        </div>
        <MudSwitch 
            @bind-Checked="@ThemeProviderService.IsDarkMode"
            Color="Color.Primary" T="bool" 
            Label="@(ThemeProviderService.IsDarkMode ? "DARK" : "LIGHT")"/>
        <MudIconButton 
            Icon="@Icons.Material.Filled.ManageAccounts" 
            Color="Color.Inherit" 
            Edge="Edge.End" />
    </MudAppBar>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code{
    
    [Inject]
    private IThemeProviderService ThemeProviderService { get; set; }
    
    [Inject] 
    private ProtectedLocalStorage BrowserSettings { get; set; }
    
    private readonly MudTheme _theme = new();
    private const string SaveSettingsKey = "threedeedarkmodesetting";
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await BrowserSettings.GetAsync<bool>(SaveSettingsKey);
            if (result.Success)
            {
                ThemeProviderService.IsDarkMode = result.Value;
            }
            StateHasChanged();
        }
    }

    private async Task SwitchTheme(bool isDarkTheme)
    {
        ThemeProviderService.IsDarkMode = isDarkTheme;
        await BrowserSettings.SetAsync(SaveSettingsKey, isDarkTheme);
    }
}


