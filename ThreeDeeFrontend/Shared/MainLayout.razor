@inherits LayoutComponentBase
@using Color = MudBlazor.Color
@using ThreeDeeFrontend.ViewModels
@using ThreeDeeFrontend.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Components
@using ThreeDeeFrontend.Services
@using ThreeDeeInfrastructure.Services
@inject TopMenuViewModel TopMenuViewModel

<PageTitle>@Localization.SharedMainPageTitle</PageTitle>
<MudThemeProvider 
    IsDarkMode="@ThemeProviderService.IsDarkMode"
    IsDarkModeChanged="async x => await SwitchTheme(x)" 
    Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudLayout>
    <MudAppBar Elevation="1">
        <MudButton
            Typo="Typo.h5"
            Class="ml-3" Href="/">
            Logo
        </MudButton>
        <div class="d-flex justify-center flex-grow-1 gap-4">
            @if (_isAuthenticated)
            {
                <FileUpload/>
            }
        </div>
        <div style="padding-right: 50px;">
            <LoginDisplay/>
        </div>
        <MudSwitch 
            @bind-Checked="@ThemeProviderService.IsDarkMode"
            Color="Color.Primary" T="bool" 
            Label="@(ThemeProviderService.IsDarkMode ? @Localization.SharedMainDarkModeDark : @Localization.SharedMainDarkModeLight)"/>
    </MudAppBar>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code
{
    [Inject]
    public IThemeProviderService ThemeProviderService { get; set; }
    
    [Inject]
    public AuthenticationValidator AuthenticationValidator { get; set; }
    
    [Inject] 
    public ProtectedLocalStorage BrowserSettings { get; set; }
    
    private readonly MudTheme _theme = new();
    private const string SaveSettingsKey = "threedeedarkmodesetting";
    private bool _isAuthenticated;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isAuthenticated = await AuthenticationValidator.GetAuthenticationState();
            try
            {
                var result = await BrowserSettings.GetAsync<bool>(SaveSettingsKey);
                if (result.Success)
                {
                    ThemeProviderService.IsDarkMode = result.Value;
                }
                else
                {
                    await BrowserSettings.SetAsync(SaveSettingsKey, ThemeProviderService.IsDarkMode);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
            StateHasChanged();
        }
    }

    private async Task SwitchTheme(bool isDarkTheme)
    {
        ThemeProviderService.IsDarkMode = isDarkTheme;
        try
        {
            await BrowserSettings.SetAsync(SaveSettingsKey, isDarkTheme);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}


