@inherits LayoutComponentBase
@using Color = MudBlazor.Color
@using ThreeDeeFrontend.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Components
@using ThreeDeeFrontend.Services
@using ThreeDeeInfrastructure.Services

<PageTitle>@Localization.SharedMainPageTitle</PageTitle>
<MudThemeProvider 
    IsDarkMode="@ThemeProviderService.IsDarkMode"
    IsDarkModeChanged="async x => await SwitchTheme(x)" 
    Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>
<MudLayout>
    @if (_isInitDone)
    {
        <MudAppBar Elevation="1" Style="@($"background: {MenuBarBackgroundColor()};")">
            <a href="/">
                @if (ThemeProviderService.IsDarkMode)
                {
                    <img src="assets/logo3ddark.png" style="height: 40px;"/>
                }
                else
                {
                    <img src="assets/logo3dlight.png" style="height: 40px;"/>
                }
            </a>
            <div class="d-flex justify-center flex-grow-1 gap-4">
                @if (AuthenticationValidator.IsAuthenticated)
                {
                    <MudButton Href="/files" Variant="Variant.Filled">Dateien</MudButton>
                }
                <MudButton Href="/advantages" Variant="Variant.Filled">Warum CreationStation</MudButton>
                <MudButton Variant="Variant.Filled">Kontakt & Support</MudButton>
            </div>
            <div style="padding-right: 50px; display: flex; align-items: center; align-content: center;">
                @if (AuthenticationValidator.IsAuthenticated)
                {
                    <FileUpload UploadStateHasChanged="i => { _uploaded = i; }"/>
                }
                <LoginDisplay/>
            </div>
            <MudSwitch
                @bind-Checked="@ThemeProviderService.IsDarkMode"
                Color="Color.Primary" T="bool"
                Label="@(ThemeProviderService.IsDarkMode ? Localization.SharedMainDarkModeDark : Localization.SharedMainDarkModeLight)"/>
        </MudAppBar>
        if (_uploaded != 0)
        {
            <MudProgressLinear Style="top: 36px; height: 6px;" Color="Color.Secondary" Value="@_uploaded" Class="my-7"/>
        }
        <MudMainContent Style="@(IsLandingPage ? "height: 100vh;" : "height: auto; min-height: 100vh;")">
            @Body
        </MudMainContent>   
    }
</MudLayout>
@if (IsLandingPage == false)
{
    <footer class="cst-footer">
        @if (ThemeProviderService.IsDarkMode){<img src="assets/logo3ddark.png" style="height: 30px;"/>}
        else{<img src="assets/logo3dlight.png" style="height: 30px;"/>}
        <div style="flex-direction: column; display: flex; align-items: center;">
            <MudLink Href="/imprint">Impressum</MudLink>
            <MudLink Href="/dsgvo">DSGVO</MudLink>
            <MudLink Href="https://github.com/HansenBerlin/ThreeDeeFrontend">Github</MudLink>
        </div>
        <MudText>© CreationStation GmbH @DateTime.Now.Year.ToString()</MudText>
    </footer>
}



@code
{
    [Inject]
    public IThemeProviderService ThemeProviderService { get; set; }
    
    [Inject]
    public AuthenticationValidator AuthenticationValidator { get; set; }
    
    [Inject] 
    public ProtectedLocalStorage BrowserSettings { get; set; }
    
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private bool IsLandingPage => NavigationManager.BaseUri + "landing-page" == NavigationManager.Uri;

    readonly MudTheme _theme = new()
    {
        Palette = new Palette()
        {
            Primary = Colors.Amber.Default,
            Secondary = Colors.DeepOrange.Darken1,
            AppbarBackground = Colors.Indigo.Lighten5,
            Background = Colors.Grey.Lighten5,
            Tertiary = Colors.Indigo.Darken1,
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Amber.Default,
            Secondary = Colors.DeepPurple.Lighten4,
            AppbarBackground = Colors.Indigo.Darken1,
            Tertiary = Colors.Indigo.Darken1,
            Background = "#27282c"
        }

    };
    private const string SaveSettingsKey = "threedeedarkmodesetting";
    private int _uploaded;
    private bool _isInitDone;


    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            AuthenticationValidator.AuthenticationStateHasChanged = EventCallback.Factory
                            .Create(this, async () => await InvokeAsync(StateHasChanged)); 
            try
            {
                var result = await BrowserSettings.GetAsync<bool>(SaveSettingsKey);
                if (result.Success)
                {
                    ThemeProviderService.IsDarkMode = result.Value;
                }
                else
                {
                    await BrowserSettings.SetAsync(SaveSettingsKey, ThemeProviderService.IsDarkMode);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
            _isInitDone = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SwitchTheme(bool isDarkTheme)
    {
        ThemeProviderService.IsDarkMode = isDarkTheme;
        try
        {
            await BrowserSettings.SetAsync(SaveSettingsKey, isDarkTheme);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private string MenuBarBackgroundColor()
    {
        bool isDarkMode = ThemeProviderService.IsDarkMode;
        if (IsLandingPage && AuthenticationValidator.IsAuthenticated == false)
        {
            return "#0000001a";
        }
        return isDarkMode ? Colors.Indigo.Darken1 : Colors.Indigo.Lighten5;
    }
}


